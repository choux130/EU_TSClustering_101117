tryCatch({
onefile = read.csv(paste0("FreshData/",files[i]), header = TRUE)
onefile$stock = unlist(strsplit(files[i], split='.', fixed=TRUE))[1]
bigfile = rbind(bigfile, onefile)
}, error=function(e){cat("ERROR in", i)})
}
library(tidyverse)
#### Combine all the .csv data ####
files  <- list.files("FreshData",pattern = '*.csv')
bigfile = data.frame()
for (i in 1:length(files)){
tryCatch({
onefile = read.csv(paste0("FreshData/",files[i]), header = TRUE)
onefile$stock = unlist(strsplit(files[i], split='.', fixed=TRUE))[1]
bigfile = rbind(bigfile, onefile)
}, error=function(e){cat("ERROR in", i, "\n")})
}
dim(bigfile) # 126755      7
bigfile$price = apply(bigfile[c("Open", "High", "Low", "Close")], 1, mean)
dim(bigfile) # 125343       7
files(38)
files[38]
View(read.csv(paste0("FreshData/",files[38]), header = TRUE))
(read.csv(paste0("FreshData/",files[38]), header = TRUE))
View(read.csv(paste0("FreshData/",files[299]), header = TRUE))
View(read.csv(paste0("FreshData/",files[1]), header = TRUE))
bigfile$price = apply(bigfile[c("Open", "High", "Low", "Close")], 1, mean)
head(bigfile)
d = bigfile[,c("Date", "stock", "price")]
d$Date = as.Date(d$Date, "%Y-$m-$d")
d$stock = as.factor(d$stock)
d_wide = spread(d, key = stock, value = price)
str(d)
d = bigfile[,c("Date", "stock", "price")]
length(unique(d$Date))
bigfile$price = apply(bigfile[c("Open", "High", "Low", "Close")], 1, mean)
d = bigfile[,c("Date", "stock", "price")]
length(unique(d$Date))
unique(d$Date)
a = as.Date(d$Date,format="%m/%d/%Y")
b = as.Date(d$Date,format="%Y-%m-%d")
a
a[is.na(a)]
b[!is.na(b)]
length(b[!is.na(b)])
length(a[is.na(a)])
a[is.na(a)] = b[!is.na(b)]
d$Date = a
str(d$Date)
str(d)
d_wide = spread(d, key = stock, value = price)
head(d_wide)
View(d_wide)
dim(d_wide)
dim(d_wide[complete.cases(d_wide)])
dim(d_wide[complete.cases(d_wide),])
d_wide[complete.cases(d_wide),]
View(d_wide[complete.cases(d_wide),])
View(d_wide[!complete.cases(d_wide),])
names(files)
files
View(read.csv(paste0("FreshData/",files[68]), header = TRUE))
bigfile = data.frame()
for (i in 1:length(files)){
tryCatch({
onefile = read.csv(paste0("FreshData/",files[i]), header = TRUE)
onefile$stock = unlist(strsplit(files[i], split='.', fixed=TRUE))[1]
bigfile = rbind(bigfile, onefile)
if (dim(bigfile)[1] < 250) {print(i)}
}, error=function(e){cat("ERROR in", i, "\n")})
}
# Er
bigfile = data.frame()
for (i in 1:length(files)){
tryCatch({
onefile = read.csv(paste0("FreshData/",files[i]), header = TRUE)
onefile$stock = unlist(strsplit(files[i], split='.', fixed=TRUE))[1]
bigfile = rbind(bigfile, onefile)
if (dim(onefile)[1] < 250) {print(i)}
}, error=function(e){cat("ERROR in", i, "\n")})
}
myfiles = lapply(files, function(x) read.csv(paste("FreshData", x, sep="/"), header=TRUE))
length(myfiles)
lapply(myfiles, dim)
lapply(myfiles, function(x) dim(x)[1])
paste(lapply(myfiles, function(x) dim(x)[1]))
as.numeric(paste(lapply(myfiles, function(x) dim(x)[1])))
sum(as.numeric(paste(lapply(myfiles, function(x) dim(x)[1]))) < 250 )
myfiles[as.numeric(paste(lapply(myfiles, function(x) dim(x)[1]))) < 250]
myfiles[as.numeric(paste(lapply(myfiles, function(x) dim(x)[1]))) != 251]
as.numeric(paste(lapply(myfiles, function(x) dim(x)[1]))) != 251
which(as.numeric(paste(lapply(myfiles, function(x) dim(x)[1]))) != 251)
drop = which(as.numeric(paste(lapply(myfiles, function(x) dim(x)[1]))) != 251)
drop
c(1:505) - drop
str(myfiles)
class(myfiles)
name = sapply(temp, function(x) unlist(strsplit(x[1], split='.', fixed=TRUE))[1])
names(myfiles) = name
name = sapply(files, function(x) unlist(strsplit(x[1], split='.', fixed=TRUE))[1])
names(myfiles) = name
name(myfiles)
names(myfiles)
myfiles[-drop]
length(myfiles[[-drop]])
drop = as.numeric(paste(lapply(myfiles, function(x) dim(x)[1]))) != 251)
as.numeric(paste(lapply(myfiles, function(x) dim(x)[1]))) != 251
drop = as.numeric(paste(lapply(myfiles, function(x) dim(x)[1]))) != 251
length(myfiles[[drop]])
drop = as.numeric(paste(lapply(myfiles, function(x) dim(x)[1]))) == 251
length(myfiles[[drop]])
length(myfiles)
myfiles[-1]
length(myfiles[-1])
length(myfiles[drop])
d = do.call(rbind, complete)
complete = myfiles[drop]
d = do.call(rbind, complete)
dim(d)
str(d)
unique(d$Date)
bigfile = do.call(rbind, complete) # 123994      6
bigfile$price = apply(bigfile[c("Open", "High", "Low", "Close")], 1, mean)
d = bigfile[,c("Date", "stock", "price")]
head(bigfile)
tail(bigfile)
head(complete)
lapply(complete, names)
class(complete[1])
class(complete[[1]])
name
class(name)
as.list(name)
mapply(function(x, y){ cbind(x, stock = y)}, x = complete, y = as.list(name))
mapply(function(x, y){ x$stock = y }, x = complete, y = as.list(name))
mapply(function(x, y){ x$stock = y }, x = myfiles, y = as.list(name))
length(myfiles)
length(as.list(name))
mapply(function(x, y){ x$stock = y }, x = myfiles, y = as.list(name))
lapply(myfiles, class)
lapply(as.list(name), class)
mapply(function(x, y){ x$stock = y }, x = myfiles, y = name_list)
name_list = as.list(name)
mapply(function(x, y){ x$stock = y }, x = myfiles, y = name_list)
mapply(function(x, y){ cbind(x, y) }, x = myfiles, y = name_list)
myfiles = lapply(files, function(x) read.csv(paste("FreshData", x, sep="/"), header=TRUE))
name = sapply(files, function(x) unlist(strsplit(x[1], split='.', fixed=TRUE))[1])
names(myfiles) = name
drop = as.numeric(paste(lapply(myfiles, function(x) dim(x)[1]))) == 251
complete = myfiles[drop]
bigfile = do.call(rbind, complete) # 123994      6
bigfile$price = apply(bigfile[c("Open", "High", "Low", "Close")], 1, mean)
haes(bigfile)
head(bigfile)
bigfile$stock = rownames_to_column(bigfile)
head(bigfile)
bigfile = rownames_to_column(bigfile)
head(bigfile)
bigfile = do.call(rbind, complete) # 123994      6
bigfile$price = apply(bigfile[c("Open", "High", "Low", "Close")], 1, mean)
rownames_to_column(bigfile)
bigfile = rownames_to_column(bigfile)
head(bigfile)
unlist(strsplit(bigfile$rowname[1], split='.', fixed=TRUE))
unlist(strsplit(bigfile$rowname, split='.', fixed=TRUE))
unlist(strsplit(bigfile$rowname, split='.', fixed=TRUE))[1]
lapply(bigfile$rowname, function(x)
unlist(strsplit(x, split='.', fixed=TRUE)))
lapply(bigfile$rowname, function(x)
unlist(strsplit(x[1], split='.', fixed=TRUE)))[1]
lapply(bigfile$rowname, function(x)
unlist(strsplit(x[1], split='.', fixed=TRUE)))
sapply(bigfile$rowname, function(x)
unlist(strsplit(x[1], split='.', fixed=TRUE)))
sapply(bigfile$rowname, function(x)
unlist(strsplit(x[1], split='.', fixed=TRUE))[1])
bigfile$rowname = sapply(bigfile$rowname, function(x)
unlist(strsplit(x[1], split='.', fixed=TRUE))[1])
head(bigfile)
d = bigfile[,c("Date", "rowname", "price")]
names(d)
names(d) = c("Date", "stock", "price")
d$stock = as.factor(d$stock)
a = as.Date(d$Date,format="%m/%d/%Y")
b = as.Date(d$Date,format="%Y-%m-%d")
a[is.na(a)] = b[!is.na(b)]
d$Date = a
head(d)
d_wide = spread(d, key = stock, value = price) # 252 504
View(d_wide[!complete.cases(d_wide),])
dim(d)
names(d) = c("Date", "stock", "price")
names(d)
head(d)
str(d)
a = as.Date(d$Date,format="%m/%d/%Y")
b = as.Date(d$Date,format="%Y-%m-%d")
b[!is.na(b)]
a[is.na(a)]
d_wide = spread(d, key = stock, value = price) # 252 504
d = bigfile[,c("Date", "rowname", "price")]
names(d) = c("Date", "stock", "price")
d$stock = as.factor(d$stock)
d_wide = spread(d, key = stock, value = price) # 252 504
View(d_wide[!complete.cases(d_wide),])
is.na(d_wide)
sum(is.na(d_wide))
a = as.Date(d$Date,format="%m/%d/%Y")
b = as.Date(d$Date,format="%Y-%m-%d")
a[is.na(a)]
b[!is.na(b)]
a[is.na(a)] = b[!is.na(b)]
d$Date = a
d_wide = spread(d, key = stock, value = price) # 252 504
View(d_wide[!complete.cases(d_wide),])
dim(d_wide)
dim(d_wide[!complete.cases(d_wide),])
is.na(d_wide[251,])
which(is.na(d_wide[251,]))
d_wide[251,280:281]
dd_wide = d_wide[complete.cases(d_wide),]
dim(dd_wide)
sum(is.na(dd_wide))
?gather
dd_long = gather(dd_wide, key = stock, value = price)
dim(dd_wide)
dd_long = gather(dd_wide, key = stock, value = price, 2:249)
head(dd_long)
dd_long = gather(dd_wide, key = stock, value = price, -Date)
head(dd_long)
ggplot(dd_long, aes(x = Date, y = price, color = stock)) + geom_line() + guides(fill=FALSE)
ggplot(dd_long, aes(x = Date, y = price, color = stock)) + geom_line() +
theme(legend.position="none")
subset(dd_long, price>1500)
unique(subset(dd_long, price>1500)$stock)
unique(subset(dd_long, price<1000 & price > 500)$stock)
d_wide_t = data.frame(t(d_wide))
head(d_wide_t)
d_wide_t[1:dim(d_wide_t)[2]] = lapply(d_wide_t[1:dim(d_wide_t)[2]],
function(df) as.numeric(as.character(df)))
d_wide_t = d_wide_t[-1,]
d_wide_t[1:dim(d_wide_t)[2]] = lapply(d_wide_t[1:dim(d_wide_t)[2]],
function(df) as.numeric(as.character(df)))
d_wide_t = data.frame(t(d_wide))
d_wide_t = d_wide_t[-1,]
d_wide_t[1:dim(d_wide_t)[2]] = lapply(d_wide_t[1:dim(d_wide_t)[2]],
function(df) as.numeric(as.character(df)))
d_wide_t = rownames_to_column(d_wide_t)
head(d_wide_t)
d_wide_t[,2]
head(d_wide)
sum(is.na(d_wide))
d_wide = spread(d, key = stock, value = price) # 252 495
sum(is.na(d_wide))
dim(d_wide)
head(d_wide)
dd_wide = d_wide[complete.cases(d_wide),] # 249 495
sum(is.na(dd_wide))
d_wide_t = data.frame(t(dd_wide))
d_wide_t = d_wide_t[-1,]
d_wide_t[1:dim(d_wide_t)[2]] = lapply(d_wide_t[1:dim(d_wide_t)[2]],
function(df) as.numeric(as.character(df)))
d_wide_t = rownames_to_column(d_wide_t)
dd_wide_t = data.frame(t(dd_wide))
dd_wide_t = dd_wide_t[-1,]
dd_wide_t[1:dim(dd_wide_t)[2]] = lapply(dd_wide_t[1:dim(d_wide_t)[2]],
function(df) as.numeric(as.character(df)))
dd_wide_t = rownames_to_column(dd_wide_t)
dd_wide_t = data.frame(t(dd_wide))
head(dd_wide_t)
dd_wide_t = dd_wide_t[-1,]
dd_wide_t[1:dim(dd_wide_t)[2]] = lapply(dd_wide_t[1:dim(d_wide_t)[2]],
function(df) as.numeric(as.character(df)))
dd_wide_t[1:dim(dd_wide_t)[2]] = lapply(dd_wide_t[1:dim(dd_wide_t)[2]],
function(df) as.numeric(as.character(df)))
dd_wide_t = rownames_to_column(dd_wide_t)
d = as.matrix(dd_all_t[,-1])
k.max <- 10
wss <- sapply(2:k.max, function(k){
set.seed(11*k)
sum(Kmeans(d, k, nstart=30, iter.max = 30, method = "euclidean")$withinss)
})
plot(2:k.max, wss, type="b", pch = 19, frame = FALSE, xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
libaray(amap)
libraay(amap)
library(amap)
d = as.matrix(dd_all_t[,-1])
k.max <- 10
wss <- sapply(2:k.max, function(k){
set.seed(11*k)
sum(Kmeans(d, k, nstart=30, iter.max = 30, method = "euclidean")$withinss)
})
plot(2:k.max, wss, type="b", pch = 19, frame = FALSE, xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
k = 2
Kmeans(d, k, nstart=30, iter.max = 30, method = "euclidean")$withinss
is.na(d)
sum(is.na(d))
d = as.matrix(dd_wide_t[,-1])
sum(is.na(d))
d = as.matrix(dd_wide_t[,-1])
k.max <- 10
wss <- sapply(2:k.max, function(k){
set.seed(11*k)
sum(Kmeans(d, k, nstart=30, iter.max = 30, method = "euclidean")$withinss)
})
plot(2:k.max, wss, type="b", pch = 19, frame = FALSE, xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
warnings()
d = as.matrix(dd_wide_t[,-1])
k.max <- 10
wss <- sapply(2:k.max, function(k){
set.seed(11*k)
sum(Kmeans(d, k, nstart=30, iter.max = 50, method = "euclidean")$withinss)
})
plot(2:k.max, wss, type="b", pch = 19, frame = FALSE, xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
k=9
set.seed(11*k)
d_all_t$clust_eu = Kmeans(d, k, nstart=30, iter.max = 15)$cluster
clust_eu  = d_all_t[,c('rowname','clust_eu')]
names(clust_eu) = c("stock", "clust_eu")
k=9
set.seed(11*k)
dd_wide_t$clust_eu = Kmeans(d, k, nstart=30, iter.max = 15)$cluster
clust_eu  = d_all_t[,c('rowname','clust_eu')]
clust_eu  = dd_wide_t[,c('rowname','clust_eu')]
names(clust_eu) = c("stock", "clust_eu")
.max <- 10
wss <- sapply(2:k.max, function(k){
set.seed(33*k)
sum(Kmeans(d, k, nstart=30, iter.max = 30, method = "correlation")$withinss)
})
k.max <- 10
wss <- sapply(2:k.max, function(k){
set.seed(33*k)
sum(Kmeans(d, k, nstart=30, iter.max = 30, method = "correlation")$withinss)
})
plot(2:k.max, wss, type="b", pch = 19, frame = FALSE, xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
c
k=4
set.seed(33*k)
dd_wide_t$clust_cor = Kmeans(d, k, nstart=30, iter.max = 30)$cluster
clust_cor  = dd_wide_t[,c('rowname','clust_cor')]
names(clust_cor) = c("stock", "clust_cor")
dst_dtw  = dist(d, method= "DTW")
hc <- hclust(dst_dtw)
plot(hc, cex = 0.6)
wss <- function(d) {
sum(scale(d, scale = FALSE)^2)
}
wrap <- function(i, hc, x) {
cl <- cutree(hc, i)
spl <- split(x, cl)
wss <- sum(sapply(spl, wss))
wss
}
res <- sapply(seq.int(1, 10), wrap, h = hc, x = d)
plot(seq_along(res), res, type = "b", pch = 19)
dst_dtw  = dist(d, method= "DTW")
hc <- hclust(dst_dtw)
plot(hc, cex = 0.6)
dst_dtw  = dist(d, method= "DTW")
library(MixSim)
dst_dtw  = dist(d, method= "DTW")
library(dtw)
dst_dtw  = dist(d, method= "DTW")
hc <- hclust(dst_dtw)
plot(hc, cex = 0.6)
wss <- function(d) {
sum(scale(d, scale = FALSE)^2)
}
wrap <- function(i, hc, x) {
cl <- cutree(hc, i)
spl <- split(x, cl)
wss <- sum(sapply(spl, wss))
wss
}
res <- sapply(seq.int(1, 10), wrap, h = hc, x = d)
plot(seq_along(res), res, type = "b", pch = 19)
k = 6
plot(hc, cex = 0.6)
rect.hclust(hc, k, border = 2:5)
dd_wide_t$clust_dtw = cutree(hc, k)
clust_dtw  = d_all_t[,c('rowname','clust_dtw')]
clust_dtw  = dd_wide_t[,c('rowname','clust_dtw')]
names(clust_dtw) = c("stock", "clust_dtw")
d_clust = Reduce(function(x, y) merge(x, y, all=TRUE),
list(clust_eu, clust_cor, clust_dtw))
d_all_long_clust = merge(d_all_long, d_clust, by = "stock", all.x = TRUE)
d_clust = Reduce(function(x, y) merge(x, y, all=TRUE),
list(clust_eu, clust_cor, clust_dtw))
dd_wide_long_clust = merge(dd_wide_long, d_clust, by = "stock", all.x = TRUE)
hc <- hclust(dst_dtw)
plot(hc, cex = 0.6)
wss <- function(d) {
sum(scale(d, scale = FALSE)^2)
}
wrap <- function(i, hc, x) {
cl <- cutree(hc, i)
spl <- split(x, cl)
wss <- sum(sapply(spl, wss))
wss
}
res <- sapply(seq.int(1, 10), wrap, h = hc, x = d)
plot(seq_along(res), res, type = "b", pch = 19)
k = 6
plot(hc, cex = 0.6)
rect.hclust(hc, k, border = 2:5)
dd_wide_t$clust_dtw = cutree(hc, k)
clust_dtw  = d_all_t[,c('rowname','clust_dtw')]
clust_dtw  = dd_wide_t[,c('rowname','clust_dtw')]
names(clust_dtw) = c("stock", "clust_dtw")
d_clust = Reduce(function(x, y) merge(x, y, all=TRUE),
list(clust_eu, clust_cor, clust_dtw))
dd_wide_long_clust = merge(dd_wide_long, d_clust, by = "stock", all.x = TRUE)
dd_wide_long_clust = merge(dd_long, d_clust, by = "stock", all.x = TRUE)
dd_long_clust = merge(dd_long, d_clust, by = "stock", all.x = TRUE)
p_eu = ggplot(dd_long_clust, aes( x = Date, y = price, color = stock )) +
geom_line() + facet_grid(clust_eu ~., scales = "free") +
guides(col = guide_legend(keywidth = 1, keyheight = 0.5) ) +
labs(title = "Clusters using Euclidean Distance") +
theme(legend.position="none")
p_eu
p_cor = ggplot(dd_long_clust, aes(x = Date, y = price, color = stock )) +
geom_line() + facet_grid(clust_cor ~., scales = "free") +
guides(col = guide_legend(keywidth = 1, keyheight = 0.5) ) +
labs(title = "Clusters using Correlation Distance") +
theme(legend.position="none")
p_cor
p_dtw = ggplot(dd_long_clust, aes(x = Date, y = price, color = stock )) +
geom_line() + facet_grid(clust_dtw ~., scales = "free") +
guides(col = guide_legend(keywidth = 1, keyheight = 0.5) ) +
labs(title = "Clusters using DTW Distance") +
theme(legend.position="none")
p_dtw
p_cor
p_eu
dst = dist_tw
dst = dist_dtw
dst_dtw
corrplot(as.matrix(dst_dtw), is.corr = FALSE, method = "color",
tl.cex = 0.5, cl.cex = 0.5, mar = c(0.5, 0.5, 0.5, 0.5))
library(corrplot)
corrplot(as.matrix(dst_dtw), is.corr = FALSE, method = "color",
tl.cex = 0.5, cl.cex = 0.5, mar = c(0.5, 0.5, 0.5, 0.5))
p_eu
View(dd_wide)
head(dd_long)
clust_eu
names(clust_eu)
subset(clust_eu, clust_eu == 4)
head(dd_long_clust)
ggplot(dd_long_clust[dd_long_clust$clust_eu == 4,], aes( x = Date, y = price, color = stock )) +
geom_line() + facet_grid(clust_eu ~., scales = "free") +
guides(col = guide_legend(keywidth = 1, keyheight = 0.5) ) +
labs(title = "Clusters using Euclidean Distance")
ggplot(dd_long_clust[dd_long_clust$clust_eu == 4 &
& dd_long_clust$price > 200,], aes( x = Date, y = price, color = stock )) +
geom_line() + facet_grid(clust_eu ~., scales = "free") +
guides(col = guide_legend(keywidth = 1, keyheight = 0.5) ) +
labs(title = "Clusters using Euclidean Distance")
ggplot(dd_long_clust[dd_long_clust$clust_eu == 4 &
dd_long_clust$price > 200,], aes( x = Date, y = price, color = stock )) +
geom_line() + facet_grid(clust_eu ~., scales = "free") +
guides(col = guide_legend(keywidth = 1, keyheight = 0.5) ) +
labs(title = "Clusters using Euclidean Distance")
ggplot(dd_long_clust[dd_long_clust$clust_eu == 4 &
dd_long_clust$stock == "HLT",], aes( x = Date, y = price, color = stock )) +
geom_line() + facet_grid(clust_eu ~., scales = "free") +
guides(col = guide_legend(keywidth = 1, keyheight = 0.5) ) +
labs(title = "Clusters using Euclidean Distance")
ggplot(dd_long_clust[
dd_long_clust$stock == "IBM",], aes( x = Date, y = price, color = stock )) +
geom_line() + facet_grid(clust_eu ~., scales = "free") +
guides(col = guide_legend(keywidth = 1, keyheight = 0.5) ) +
labs(title = "Clusters using Euclidean Distance")
ggplot(dd_long_clust[
dd_long_clust$stock == "FFIV",], aes( x = Date, y = price, color = stock )) +
geom_line() + facet_grid(clust_eu ~., scales = "free") +
guides(col = guide_legend(keywidth = 1, keyheight = 0.5) ) +
labs(title = "Clusters using Euclidean Distance")
ggplot(dd_long_clust[dd_long_clust$clust_eu == 6 ,], aes( x = Date, y = price, color = stock )) +
geom_line() + facet_grid(clust_eu ~., scales = "free") +
guides(col = guide_legend(keywidth = 1, keyheight = 0.5) ) +
labs(title = "Clusters using Euclidean Distance")
p_cor = ggplot(dd_long_clust, aes(x = Date, y = price, color = stock )) +
geom_line() + facet_grid(clust_cor ~., scales = "free") +
guides(col = guide_legend(keywidth = 1, keyheight = 0.5) ) +
labs(title = "Clusters using Correlation Distance") +
theme(legend.position="none")
p_cor
p_cor = ggplot(dd_long_clust, aes(x = Date, y = price, color = stock )) +
geom_line() + facet_grid(clust_cor ~., scales = "fix") +
guides(col = guide_legend(keywidth = 1, keyheight = 0.5) ) +
labs(title = "Clusters using Correlation Distance") +
theme(legend.position="none")
p_cor
p_cor = ggplot(dd_long_clust, aes(x = Date, y = price, color = stock )) +
geom_line() + facet_grid(clust_cor ~., scales = "free") +
guides(col = guide_legend(keywidth = 1, keyheight = 0.5) ) +
labs(title = "Clusters using Correlation Distance") +
theme(legend.position="none")
p_cor
p_dtw = ggplot(dd_long_clust, aes(x = Date, y = price, color = stock )) +
geom_line() + facet_grid(clust_dtw ~., scales = "free") +
guides(col = guide_legend(keywidth = 1, keyheight = 0.5) ) +
labs(title = "Clusters using DTW Distance") +
theme(legend.position="none")
p_dtw
