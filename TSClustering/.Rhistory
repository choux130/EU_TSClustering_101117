A = simdataset(n = 500, Pi = Q$Pi, Mu = Q$Mu, S = Q$S)
sim_d = A$X
plot(sim_d)
Q <- MixSim(BarOmega = 0, MaxOmega = 0.01, K = 4, p = 2)
A = simdataset(n = 500, Pi = Q$Pi, Mu = Q$Mu, S = Q$S)
sim_d = A$X
plot(sim_d)
Q <- MixSim(BarOmega = 0, MaxOmega = 0.01, K = 4, p = 2)
Q <- MixSim(BarOmega = 0.001, MaxOmega = 0.01, K = 4, p = 2)
A = simdataset(n = 500, Pi = Q$Pi, Mu = Q$Mu, S = Q$S)
sim_d = A$X
plot(sim_d)
Q <- MixSim(BarOmega = 0.01, MaxOmega = 0.01, K = 4, p = 2)
A = simdataset(n = 500, Pi = Q$Pi, Mu = Q$Mu, S = Q$S)
sim_d = A$X
plot(sim_d)
Q <- MixSim(BarOmega = 0.001, MaxOmega = 0.001, K = 4, p = 2)
A = simdataset(n = 500, Pi = Q$Pi, Mu = Q$Mu, S = Q$S)
Q <- MixSim(BarOmega = 0.01, MaxOmega = NULL, K = 4, p = 2)
A = simdataset(n = 500, Pi = Q$Pi, Mu = Q$Mu, S = Q$S)
sim_d = A$X
plot(sim_d)
Q <- MixSim(BarOmega = 0.001, MaxOmega = NULL, K = 4, p = 2)
A = simdataset(n = 500, Pi = Q$Pi, Mu = Q$Mu, S = Q$S)
sim_d = A$X
plot(sim_d)
Q <- MixSim(BarOmega = 0.005, MaxOmega = NULL, K = 4, p = 2)
A = simdataset(n = 500, Pi = Q$Pi, Mu = Q$Mu, S = Q$S)
sim_d = A$X
plot(sim_d)
Q <- MixSim(BarOmega = 0.005, MaxOmega = NULL, K = 4, p = 2)
A = simdataset(n = 500, Pi = Q$Pi, Mu = Q$Mu, S = Q$S)
sim_d = A$X
plot(sim_d)
set.seed(1234)
Q <- MixSim(BarOmega = 0.005, MaxOmega = NULL, K = 4, p = 2)
A = simdataset(n = 500, Pi = Q$Pi, Mu = Q$Mu, S = Q$S)
sim_d = A$X
plot(sim_d)
sim_d = A$X
sim_d$true_clust = A$id
A$id
sim_d$true_clust = A$id
head(sim_d)
Q <- MixSim(BarOmega = 0.005, MaxOmega = NULL, K = 4, p = 2)
A = simdataset(n = 500, Pi = Q$Pi, Mu = Q$Mu, S = Q$S)
sim_d = A$X
class(sim_d)
sim_d = data.frame(A$X)
sim_d$true_clust = A$id
head(sim_d)
plot(sim_d)
plot(sim_d[,1:2])
set.seed(34)
Q <- MixSim(BarOmega = 0.005, MaxOmega = NULL, K = 4, p = 2)
A = simdataset(n = 500, Pi = Q$Pi, Mu = Q$Mu, S = Q$S)
sim_d = data.frame(A$X)
sim_d$true_clust = A$id
plot(sim_d[,1:2])
set.seed(123)
Q <- MixSim(BarOmega = 0.005, MaxOmega = NULL, K = 4, p = 2)
A = simdataset(n = 500, Pi = Q$Pi, Mu = Q$Mu, S = Q$S)
plot(A$X)
set.seed(1234)
Q <- MixSim(BarOmega = 0.005, MaxOmega = NULL, K = 4, p = 2)
A = simdataset(n = 500, Pi = Q$Pi, Mu = Q$Mu, S = Q$S)
plot(A$X)
set.seed(1234)
Q <- MixSim(BarOmega = NULL, MaxOmega = 0.002, K = 4, p = 2)
A = simdataset(n = 500, Pi = Q$Pi, Mu = Q$Mu, S = Q$S)
plot(A$X)
Q <- MixSim(BarOmega = NULL, MaxOmega = 0.001, K = 4, p = 2)
A = simdataset(n = 500, Pi = Q$Pi, Mu = Q$Mu, S = Q$S)
plot(A$X)
set.seed(1234)
Q <- MixSim(BarOmega = NULL, MaxOmega = 0.001, K = 4, p = 2)
A = simdataset(n = 500, Pi = Q$Pi, Mu = Q$Mu, S = Q$S)
plot(A$X)
set.seed(1234)
Q <- MixSim(BarOmega = NULL, MaxOmega = 0.01, K = 4, p = 2)
A = simdataset(n = 500, Pi = Q$Pi, Mu = Q$Mu, S = Q$S)
plot(A$X)
set.seed(1234)
Q <- MixSim(BarOmega = NULL, MaxOmega = 0.1, K = 4, p = 2)
A = simdataset(n = 500, Pi = Q$Pi, Mu = Q$Mu, S = Q$S)
plot(A$X)
set.seed(1234)
Q <- MixSim(BarOmega = 0.2, MaxOmega = NULL , K = 4, p = 2)
A = simdataset(n = 500, Pi = Q$Pi, Mu = Q$Mu, S = Q$S)
plot(A$X)
set.seed(1234)
Q <- MixSim(BarOmega = 0.002, MaxOmega = NULL , K = 4, p = 2)
A = simdataset(n = 500, Pi = Q$Pi, Mu = Q$Mu, S = Q$S)
plot(A$X)
set.seed(234)
Q <- MixSim(BarOmega = 0.002, MaxOmega = NULL , K = 4, p = 2)
A = simdataset(n = 500, Pi = Q$Pi, Mu = Q$Mu, S = Q$S)
plot(A$X)
set.seed(34)
Q <- MixSim(BarOmega = 0.002, MaxOmega = NULL , K = 4, p = 2)
A = simdataset(n = 500, Pi = Q$Pi, Mu = Q$Mu, S = Q$S)
plot(A$X)
set.seed(3)
Q <- MixSim(BarOmega = 0.002, MaxOmega = NULL , K = 4, p = 2)
A = simdataset(n = 500, Pi = Q$Pi, Mu = Q$Mu, S = Q$S)
plot(A$X)
set.seed(3)
Q <- MixSim(BarOmega = 0.0002, MaxOmega = NULL , K = 4, p = 2)
A = simdataset(n = 500, Pi = Q$Pi, Mu = Q$Mu, S = Q$S)
plot(A$X)
set.seed(3)
Q <- MixSim(BarOmega = 0.0002, MaxOmega = NULL , K = 4, p = 2)
A = simdataset(n = 500, Pi = Q$Pi, Mu = Q$Mu, S = Q$S)
plot(A$X)
sim_d = data.frame(A$X)
plot(sim_d)
sim_d$true_clust = A$id
plot(sim_d[,1:2])
k  = kmeans(sim_data[,1:2], centers=4)
k  = kmeans(sim_d[,1:2], centers=4)
names(k)
k$cluster
plot(sim_d[,1:2], col = dim_d$true_clust)
plot(sim_d[,1:2], col = sim_d$true_clust)
plot(sim_d[,1:2], col = k$cluster)
set.seed(222)
k  = kmeans(sim_d[,1:2], centers=4)
k$cluster
plot(sim_d[,1:2], col = k$cluster)
set.seed(2223)
k  = kmeans(sim_d[,1:2], centers=4)
k$cluster
plot(sim_d[,1:2], col = k$cluster)
plot(sim_d[,1:2], col = sim_d$true_clust)
set.seed(2223)
k  = kmeans(sim_d[,1:2], centers=4)
k$cluster
plot(sim_d[,1:2], col = k$cluster)
set.seed(123)
k  = kmeans(sim_d[,1:2], centers=4)
k$cluster
plot(sim_d[,1:2], col = k$cluster)
set.seed(123)
k  = kmeans(sim_d[,1:2], centers=4)
k$cluster
plot(sim_d[,1:2], col = k$cluster)
set.seed(1234)
k  = kmeans(sim_d[,1:2], centers=4)
k$cluster
plot(sim_d[,1:2], col = k$cluster)
set.seed(14)
k  = kmeans(sim_d[,1:2], centers=4)
k$cluster
plot(sim_d[,1:2], col = k$cluster)
names(k)
k$tot.withinss
set.seed(2223) # good case
k  = kmeans(sim_d[,1:2], centers=4)
k$cluster
k$tot.withinss
set.seed(14) # bad case
kmeans.ani(sim_d[,1:2], centers = 4)
library(animation)
set.seed(14) # bad case
kmeans.ani(sim_d[,1:2], centers = 4)
set.seed(14) # bad case
kmeans.ani(sim_d[,1:2], centers = 2)
kmeans.ani(sim_d[,1:2], centers = 3)
set.seed(14) # bad case
kmeans.ani(sim_d[,1:2], centers = 3)
set.seed(14) # bad case
kmeans.ani(sim_d[,1:2], centers = 5)
set.seed(14) # bad case
kmeans.ani(sim_d[,1:2], centers = 4)
?kmeans.ani
set.seed(14) # bad case
kmeans.ani(sim_d[,1:2], centers = 4, pch = 1:4,  col = 1:4)
set.seed(14) # bad case
kmeans.ani(sim_d[,1:2], centers = 4, pch = 1:4,  col = 1:4)
set.seed(14) # bad case
k  = kmeans(sim_d[,1:2], centers=4)
k$cluster
k$tot.withinss
plot(sim_d[,1:2], col = k$cluster)
set.seed(2223) # good case
kmeans.ani(sim_d[,1:2], centers = 4, pch = 1:4,  col = 1:4)
set.seed(2223) # good case
ani.options(interval = 2)
kmeans.ani(sim_d[,1:2], centers = 4, pch = 1:4,  col = 1:4)
set.seed(2223) # good case
ani.options(interval = 5)
kmeans.ani(sim_d[,1:2], centers = 4, pch = 1:4,  col = 1:4)
?kmeans.ani
set.seed(2223) # good case
ani.options(interval = 5)
kmeans.ani(sim_d[,1:2], centers = 4, pch = 1:4,  col = 1:4,
hints = c("update centers!", "Finding clusters"))
?simulate
simulate.ARIMA
simulate.arima
?simulate.arima
?simulate.ARIMA
model <- Arima(ts(rnorm(100),freq=4), order=c(1,1,1), seasonal=c(1,1,1),
fixed=c(phi=0.5, theta=-0.4, Phi=0.3, Theta=-0.2))
foo <- simulate(model, nsim=1000)
fit <- Arima(foo, order=c(1,1,1), seasonal=c(1,1,1))
library(forecast)
install.packages("forecast")
model <- Arima(ts(rnorm(100),freq=4), order=c(1,1,1), seasonal=c(1,1,1),
fixed=c(phi=0.5, theta=-0.4, Phi=0.3, Theta=-0.2))
foo <- simulate(model, nsim=1000)
fit <- Arima(foo, order=c(1,1,1), seasonal=c(1,1,1))
?Arima
?auto.arima
library(forecast)
model <- Arima(ts(rnorm(100),freq=4), order=c(1,1,1), seasonal=c(1,1,1),
fixed=c(phi=0.5, theta=-0.4, Phi=0.3, Theta=-0.2))
foo <- simulate(model, nsim=1000)
fit <- Arima(foo, order=c(1,1,1), seasonal=c(1,1,1))
fit
plot(foo)
?Arima
model <- Arima(ts(rnorm(100),freq=4), order=c(2,0,4), seasonal=c(1,2,3),
fixed=c(phi=0.5, theta=-0.4, Phi=0.3, Theta=-0.2))
foo <- simulate(model, nsim=1000)
model <- Arima(ts(rnorm(100),freq=4), order=c(2,0,4), seasonal=c(1,2,3),
fixed=c(phi=0.5, theta=-0.4, Phi=0.3, Theta=-0.2))
ar.sim<-arima.sim(model=list(ar=c(.9,-.2)),n=100)
sim(ar.sim)
plot(ar.sim)
arima(ar.som)
arima(ar.sim)
ts.plot(ar.sim)
?kmeans()
?kmeans(sim_d, 4)
kmeans(sim_d, 4)
?kmenas
?kmeans.ani
?kmeans
set.seed(2223) # good case
k  = kmeans(sim_d[,1:2], centers=4, nstart = 1)
k$cluster
k$tot.withinss
plot(sim_d[,1:2], col = k$cluster)
set.seed(14) # bad case
kmeans.ani(sim_d[,1:2], centers = 4, pch = 1:4,  col = 1:4)
k  = kmeans(sim_d[,1:2], centers=4, nstart = 1)
k$cluster
k$tot.withinss
set.seed(14) # bad case
k  = kmeans(sim_d[,1:2], centers=4, nstart = 1)
k$cluster
k$tot.withinss
plot(sim_d[,1:2], col = k$cluster)
k.max <- 15
wss <- sapply(1:k.max,
function(k){kmeans(sim_d, k, nstart=50, iter.max = 15 )$tot.withinss})
wss
plot(1:k.max, wss,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
set.seed(14)
k  = kmeans(sim_d[,1:2], centers=4, nstart = 30)
k$cluster
k$tot.withinss
plot(sim_d[,1:2], col = k$cluster)
install.packages("dtwclust")
?zscore
data(uciCT)
install.packages("TSclust")
library("TSclust")
data(uciCT)
install.packages("dtw")
kml
load("kml_cld.RData")
kml
cld
kml = kml(cld)
plot(cld, 2, toPlot="both")
data("synthetic.tseries")
data(synthetic.tseries)
data("interest.rates")
data(uciCT)
?zscore
?reinterpolate
library(dtwclust)
?reinterpolate
?zscore
data(uciCT)
series <- reinterpolate(CharTraj, new.length = max(lengths(CharTraj)))
series <- zscore(series)
series
uciCT
print(data(uciCT))
uciCT
plot(series)
pc.dtwlb <- tsclust(series, k = 20L,
distance = "dtw_lb", centroid = "pam",
seed = 3247, trace = TRUE,
control = partitional_control(pam.precompute = FALSE),
args = tsclust_args(dist = list(window.size = 20L)))
kml
d_comp_norm_t
head(d_comp_norm_t)
kk = kmeans(d_comp_norm_t,nstart=50, iter.max = 15)
View(d_comp_norm_t)
dim(d_comp_norm_t)
k.max <- 10
wss <- sapply(1:k.max,
function(k){kmeans(d_comp_norm_t[,2:4262], k, nstart=50, iter.max = 15 )$tot.withinss})
wss
plot(1:k.max, wss,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
kmeans(d_comp_norm_t[,2:4262], 3)
(ex1 <- generateArtificialLongData())
plot(ex1)
plot(ex1,parTraj=parTRAJ(col=rep(2:5,each=50)))
plot(ex1)
plot(ex1,parTraj=parTRAJ(col=rep(2:5,each=50)))
names(ex1)
ex1
data.frame(ex1)
myCld["traj"]
ex1["traj"]
class(ex1["traj"])
dd = data.frame(ex1["traj"])
dim(dd)
set.seed(3)
Q <- MixSim(BarOmega = 0.0002, MaxOmega = NULL , K = 4, p = 2)
A = simdataset(n = 500, Pi = Q$Pi, Mu = Q$Mu, S = Q$S)
plot(A$X)
sim_d = data.frame(A$X)
library(MixSim)
set.seed(3)
Q <- MixSim(BarOmega = 0.0002, MaxOmega = NULL , K = 4, p = 2)
A = simdataset(n = 500, Pi = Q$Pi, Mu = Q$Mu, S = Q$S)
plot(A$X)
sim_d = data.frame(A$X)
sim_d
dim(sim_d)
dd_t = data.frame(t(dd))
dim(dd_t)
kk = kmeans(dd)
k.max <- 15
wss <- sapply(1:k.max,
function(k){kmeans(dd, k, nstart=50, iter.max = 15 )$tot.withinss})
wss
plot(1:k.max, wss,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
ex3 <- generateArtificialLongData(
meanTrajectories=list(function(t)0,function(t)-t,function(t)t),
nbEachClusters=c(100,30,10),
residualVariation=function(t){rnorm(1,0,3)},
percentOfMissing=c(0.25,0.5,0.25)
)
part3 <- partition(rep(1:3,c(100,30,10)))
plot(ex3,parTraj=parTRAJ(col=rep(2:4,c(100,30,10))))
names(ex3)
print(ex3)
ex3 <- generateArtificialLongData(
meanTrajectories=list(function(t)0,function(t)-t,function(t)t),
nbEachClusters=c(100,30,10),
residualVariation=function(t){rnorm(1,0,3)}
)
part3 <- partition(rep(1:3,c(100,30,10)))
plot(ex3,parTraj=parTRAJ(col=rep(2:4,c(100,30,10))))
dd = data.frame(ex3["traj"]) # 200 11
k.max <- 15
wss <- sapply(1:k.max,
function(k){kmeans(dd, k, nstart=50, iter.max = 15 )$tot.withinss})
wss
plot(1:k.max, wss,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
kkk = kml(ex3)
plot(ex3, 2, toPlot="both")
plot(ex3,parTraj=parTRAJ(col=rep(2:4,c(100,30,10))))
plot(ex3, 2, toPlot="both")
plot(ex3, 3, toPlot="both")
generateArtificialLongData
?generateArtificialLongData
dd_norm = zscore(dd)
dd
dd_ts = lapply(dd, 1, ts)
dd_ts = apply(dd, 1,ts)
dd_ts
dd_norm = zscore(dd)
str(dd)
str(dd_ts)
data(uciCT)
series <- reinterpolate(CharTraj, new.length = max(lengths(CharTraj)))
series <- zscore(series)
series
class(series)
series <- reinterpolate(CharTraj, new.length = max(lengths(CharTraj)))
series
lapply(series,class)
head(dd)
dd_t = data.frame(t(dd))
head(dd_t)
?gather
library(tidyverse)
?gather
dim(dd_t)
dd_t_long = gather(dd_t, value = 1:140)
head(dd_t_long)
dd_t_long = gather(dd_t, value = "value")
head(dd_t_long)
dd_t = data.frame(t(dd))
dd_t = rownames_to_column(dd_t)
head(dd_t)
dd_t_long = gather(dd_t, key = "rowname", value = "value")
head(dd_t_long)
names(dd_t_long) = c("time","subject", "value")
dd_t_list = split(dd_t_long, dd_t_long$subject)
length(dd_t_list)
dd_t_list
dim(dd)
dd_t_list = lapply(dd_t_list, function(x) x[,"value"])
dd_t_list
series <- zscore(dd_t_list)
tsclust(series, k = 20L,
distance = "dtw_lb", centroid = "pam",
seed = 3247, trace = TRUE,
control = partitional_control(pam.precompute = FALSE),
args = tsclust_args(dist = list(window.size = 20L)))
pc.dtwlb = tsclust(series, k = 20L,
distance = "dtw_lb", centroid = "pam",
seed = 3247, trace = TRUE,
control = partitional_control(pam.precompute = FALSE),
args = tsclust_args(dist = list(window.size = 20L)))
plot(pc.dtwlb)
pc.dtwlb = tsclust(series, k = 3,
distance = "dtw_lb", centroid = "pam",
seed = 3247, trace = TRUE,
control = partitional_control(pam.precompute = FALSE),
args = tsclust_args(dist = list(window.size = 20L)))
plot(pc.dtwlb)
install.packages("dtw")
install.packages("dtw")
install.packages("dtw")
install.packages("dtw")
library(dtw)
dist(series, method = "dtw")
series
hc = hclust(dmatrix, method="average")
dmatrix = dist(series, method = "dtw")
hc = hclust(dmatrix, method="average")
plot(hc, labels=observedLabels, main="")
plot(hc, main="")
?diss
install.packages(quantmod)
diss(series, "COR")
library(TSclust)
diss(series, "COR")
?diss
series
diss(series[[1:10]], "COR")
series[[1:10]]
diss(series[[c(1:10)]], "COR")
diss(series[c(1:10)], "COR")
plot(diss(series[c(1:10)], "COR"))
dim(dd)
hclust(dd)
?hclust
?dist
dmatrix = dist(dd, method = "euclidean")
dd_m = dist(dd, method = "euclidean")
hclust(dd_m)
plot(hclust(dd_m))
ex3 <- generateArtificialLongData(
meanTrajectories=list(function(t)0,function(t)-t,function(t)t),
nbEachClusters=c(30,20,10),
residualVariation=function(t){rnorm(1,0,3)}
)
part3 <- partition(rep(1:3,c(100,30,10)))
plot(ex3,parTraj=parTRAJ(col=rep(2:4,c(100,30,10))))
part3 <- partition(rep(1:3,c(30,20,10)))
plot(ex3,parTraj=parTRAJ(col=rep(2:4,c(30,20,10))))
dd = data.frame(ex3["traj"]) # 140 11
k.max <- 15
wss <- sapply(1:k.max,
function(k){kmeans(dd, k, nstart=50, iter.max = 15 )$tot.withinss})
wss
plot(1:k.max, wss,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
kkk = kml(ex3)
plot(ex3, 2, toPlot="both")
d_comp_norm_t$clust_1 = getClusters(cld, 2)
plot(ex3, 2, toPlot="both")
plot(ex3, 3, toPlot="both")
getClusters(ex3, 3)
ex3
part3
class(ex3)
ex3$ClusterLongData
ex3[[1]]
class(ex3)
print(ex3)
getClusters(ex3, 3)
ex3["clust"]
part3
part3["clusters"]
getClusters(ex3, 3)
