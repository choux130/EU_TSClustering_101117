{
    "collab_server" : "",
    "contents" : "#### SIMULATED DATA ####\nlibrary(MixSim)\n\nset.seed(3)\nQ <- MixSim(BarOmega = 0.00002, MaxOmega = NULL , K = 4, p = 2, hom = TRUE)\nA = simdataset(n = 50, Pi = Q$Pi, Mu = Q$Mu, S = Q$S)\nsim_d = data.frame(A$X)\nsim_d$true_cluster = A$id\nplot(sim_d[,1:2], main = \"Simulated Clustering Data\")\nplot(sim_d[,1:2], col = sim_d$true_cluster, main = \"Simulated Clustering Data\")\n\n#### K-means Animation ####\n# https://yihui.name/animation/example/kmeans-ani/\nlibrary(animation)\nani.options(interval = 3)\nset.seed(123)\nkmeans.ani(sim_d[,1:2], centers = 4, pch = 1:4,  col = 1:4, \n           hints = c(\"Get the new center points\", \n                     \"Update cluster to the nearest one\"))\n# save the animation\nsaveGIF({\n  set.seed(123)\n  kmeans.ani(sim_d[,1:2], centers = 4, pch = 1:4,  col = 1:4, \n             hints = c(\"Get the new center points\", \"Update cluster to the nearest one\"))\n}, movie.name = \"kmeans.gif\", interval = 3, nmax = 30, ani.width = 600)\n\n#### Things need to be noticed ####\n#### You wonâ€™t always get the same results. So, do it more times! ####\nset.seed(2223) # good case\nk  = kmeans(sim_d[,1:2], centers=4, nstart = 1) \nplot(sim_d[,1:2], col = k$cluster, main = \"Good Casse\")\n\nset.seed(14) # bad case\nk  = kmeans(sim_d[,1:2], centers=4, nstart = 1) \nplot(sim_d[,1:2], col = k$cluster, main = \"Bad Case\")\n\n# so we need to try multiple time \nset.seed(14) \nk  = kmeans(sim_d[,1:2], centers=4, nstart = 30) \nplot(sim_d[,1:2], col = k$cluster)\n\n#### How to choose the correct number of clusters ? ####\nset.seed(14) # 2 clusters\nk  = kmeans(sim_d[,1:2], centers=2, nstart = 1) \nplot(sim_d[,1:2], col = k$cluster)\n\nset.seed(14) # 6 clusters\nk  = kmeans(sim_d[,1:2], centers=6, nstart = 1) \nplot(sim_d[,1:2], col = k$cluster)\n\n# find the best number of cluster\nk.max <- 10\nwss <- sapply(1:k.max, function(k){\n  kmeans(sim_d, k, nstart=30, iter.max = 15 )$tot.withinss\n})\nplot(1:k.max, wss, type=\"b\", pch = 19, frame = FALSE, xlab=\"Number of clusters K\",\n     ylab=\"Total within-clusters sum of squares\")\n\n#### Standardize the data ####\n# https://stats.stackexchange.com/questions/41704/how-and-why-do-normalization-and-feature-scaling-work\n\n#### Hierarchical Clustering ####\n\n#### Dissimilarity Matrix ####\nlibrary(corrplot)\n\ndst = dist(sim_d[,1:2], method = \"euclidean\")\ncorrplot(as.matrix(dst), is.corr = FALSE, method = \"color\", \n         tl.cex = 0.5, cl.cex = 0.5, mar = c(0.5, 0.5, 0.5, 0.5))\n\n#### Algorithm ####\ndst = dist(sim_d[,1:2], method = \"euclidean\")\nhc = hclust(dst)\nplot(hc, cex = 0.6)\n\n#### Find the best cluster ####\ndst = dist(sim_d[,1:2], method = \"euclidean\")\nhc = hclust(dst)\n\nwss <- function(d) {\n  sum(scale(d, scale = FALSE)^2)\n}\nwrap = function(i, hc, x) {\n  cl = cutree(hc, i)\n  spl = split(x, cl)\n  wss = sum(sapply(spl, wss))\n  wss\n}\n\nres = sapply(seq.int(1, 10), wrap, h = hc, x = sim_d[,1:2])\nplot(seq_along(res), res, type = \"b\", pch = 19)\n\nk = 4\nplot(hc, cex = 0.6)\nrect.hclust(hc, k, border = 2:5)\ncutree(hc, k)\n\n#### Time Series Data ####\n#### Example Data - stock price ####\nlibrary(tidyverse)\n# temp = list.files(path = \"FreshData\", pattern=\"*.csv\")\n# myfiles = lapply(temp, function(x) read.csv(paste(\"FreshData\", x, sep=\"/\"), header=TRUE))\n# name = sapply(temp, function(x) unlist(strsplit(x[1], split='.', fixed=TRUE))[1])\n# names(myfiles) = name\n# \n# newfiles = lapply(myfiles, function(df) {\n#   cbind(df, price = apply(df[c(\"Open\", \"High\", \"Low\", \"Close\")], 1, mean))\n# })\n# newfiles = lapply(newfiles, function(df) df[which(names(df) %in% c('Date','price'))])\n# newfiles = lapply(newfiles, function(df) df[complete.cases(df),])\n# \n# # change the name of 'price' column to the stock name\n# for (i in names(newfiles)){\n#   names(newfiles[[i]]) = c('Date', i)\n# }\n# \n# d_all= Reduce(function(dtf1, dtf2) full_join(dtf1, dtf2), newfiles[c(1:37)])\n# d_all$Date = as.Date(d_all$Date, \"%Y-%m-%d\")\n# d_all = d_all[order(d_all$Date),]\n# \n# d_all = d_all[order(d_all$Date),]\n# dim(d_all) # 251  38\n# View(d_all)\n# write.csv(d_all, file = \"stock_37.csv\")\n\nd_all = read.csv(\"stock_37.csv\", header = TRUE)\nd_all = d_all[-which(names(d_all) %in% c(\"ADS\", \"AGN\", \"AES\", \"AMD\"))]\nd_all = d_all[complete.cases(d_all),]\nd_all = d_all[,-1]\nnum_col = dim(d_all)[2]\nd_all$Date = as.Date(d_all$Date, \"%Y-%m-%d\")\nd_all = subset(d_all, Date >= \"2017-01-01\")\nd_all_long = gather(d_all, key = stock, value = price, 2:num_col)\nggplot(d_all_long, aes(x = Date, y = price, group = stock, color = stock)) + \n  geom_line() + guides(col = guide_legend(keywidth = 1, keyheight = 0.5) )\n\nsaveGIF({\n  for (i in 1:length(unique(d_all_long$stock))) \n    print(ggplot(subset(d_all_long, stock %in% unique(d_all_long$stock)[1:i]), \n           aes(x = Date, y = price, group = stock, color = stock)) + \n    geom_line() + guides(col = guide_legend(keywidth = 1, keyheight = 0.5) ))\n}, movie.name = \"stock.gif\", interval = 0.5)\n\n#### Results ####\n# data preparation\ntime = as.Date(d_all$Date, '%Y-%m-%d')\nd_all_t = data.frame(t(d_all))\nd_all_t = d_all_t[-1,]\nd_all_t[1:dim(d_all_t)[2]] = lapply(d_all_t[1:dim(d_all_t)[2]], \n         function(df) as.numeric(as.character(df)))\nd_all_t = rownames_to_column(d_all_t)\n\n# euclidean - amap::Kmeans\nlibrary(amap)\n\nd = as.matrix(d_all_t[,-1])\nk.max <- 10\nwss <- sapply(2:k.max, function(k){\n  set.seed(11*k)\n  sum(Kmeans(d, k, nstart=30, iter.max = 30, method = \"euclidean\")$withinss)\n})\nplot(2:k.max, wss, type=\"b\", pch = 19, frame = FALSE, xlab=\"Number of clusters K\",\n     ylab=\"Total within-clusters sum of squares\")\nk=2\nset.seed(11*k)\nd_all_t$clust_eu = Kmeans(d, k, nstart=30, iter.max = 15)$cluster\nclust_eu  = d_all_t[,c('rowname','clust_eu')]\nnames(clust_eu) = c(\"stock\", \"clust_eu\")\n\n# correlation - amap::Kmeans\nk.max <- 10\nwss <- sapply(2:k.max, function(k){\n  set.seed(33*k)\n  sum(Kmeans(d, k, nstart=30, iter.max = 30, method = \"correlation\")$withinss)\n})\nplot(2:k.max, wss, type=\"b\", pch = 19, frame = FALSE, xlab=\"Number of clusters K\",\n     ylab=\"Total within-clusters sum of squares\")\nk=4\nset.seed(33*k)\nd_all_t$clust_cor = Kmeans(d, k, nstart=30, iter.max = 30)$cluster\nclust_cor  = d_all_t[,c('rowname','clust_cor')]\nnames(clust_cor) = c(\"stock\", \"clust_cor\")\n\n# dtw \ndst_dtw  = dist(d, method= \"DTW\")\nhc <- hclust(dst_dtw)\nplot(hc, cex = 0.6)\n\nwss <- function(d) {\n  sum(scale(d, scale = FALSE)^2)\n}\nwrap <- function(i, hc, x) {\n  cl <- cutree(hc, i)\n  spl <- split(x, cl)\n  wss <- sum(sapply(spl, wss))\n  wss\n}\n\nres <- sapply(seq.int(1, 10), wrap, h = hc, x = d)\nplot(seq_along(res), res, type = \"b\", pch = 19)\n\nk = 4\nplot(hc, cex = 0.6)\nrect.hclust(hc, k, border = 2:5)\n\nd_all_t$clust_dtw = cutree(hc, k)\nclust_dtw  = d_all_t[,c('rowname','clust_dtw')]\nnames(clust_dtw) = c(\"stock\", \"clust_dtw\")\n\n# merge data for plotting\nd_clust = Reduce(function(x, y) merge(x, y, all=TRUE), \n                list(clust_eu, clust_cor, clust_dtw))\nd_all_long_clust = merge(d_all_long, d_clust, by = \"stock\", all.x = TRUE)\n\np_eu = ggplot(d_all_long_clust, aes( x = Date, y = price, color = stock )) + \n  geom_line() + facet_grid(clust_eu ~., scales = \"free\") +\n  guides(col = guide_legend(keywidth = 1, keyheight = 0.5) ) + \n  labs(title = \"Clusters using Euclidean Distance\") +\n  theme(legend.position=\"none\")\np_eu\n\np_cor = ggplot(d_all_long_clust, aes(x = Date, y = price, color = stock )) + \n  geom_line() + facet_grid(clust_cor ~., scales = \"free\") +\n  guides(col = guide_legend(keywidth = 1, keyheight = 0.5) ) +\n  labs(title = \"Clusters using Correlation Distance\") +\n  theme(legend.position=\"none\")\np_cor\n\np_dtw = ggplot(d_all_long_clust, aes(x = Date, y = price, color = stock )) + \n  geom_line() + facet_grid(clust_dtw ~., scales = \"free\") +\n  guides(col = guide_legend(keywidth = 1, keyheight = 0.5) ) +\n  labs(title = \"Clusters using DTW Distance\") +\n  theme(legend.position=\"none\")\np_dtw\n\n\n\n",
    "created" : 1507690195372.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "562813660",
    "id" : "1C753F56",
    "lastKnownWriteTime" : 1507690301,
    "last_content_update" : 1507690301995,
    "path" : "~/Box Sync/EngineeringUniversity/TSClustering_101117/TSClustering/clustering_intro_examples.R",
    "project_path" : "clustering_intro_examples.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}